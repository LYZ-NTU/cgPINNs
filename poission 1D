from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt
import deepxde as dde
from deepxde.backend import tf




h=0.001

ec=20000

def gelu(x):
    return 0.5 * x * (1 + tf.erf(x / tf.sqrt(2.0)))


#数值解
def func(x):
    sol = x+1 / 9 * np.sin(9 * x)
    # sol = x + 1 / 8 * np.sin(8 * x)+np.sin(x)+1 / 2 * np.sin(2 * x)+1 / 3 * np.sin(3 * x)+1 / 4 * np.sin(4 * x)
    for i in range(1, 6):
        sol += 1 / i *np.sin(i * x)
    return sol



activation =gelu
initializer = "Glorot uniform"
# PINN
def PINNpde(x, y):
    dy_xx = dde.grad.hessian(y, x)
    # f = 8 * tf.sin(8 * x)
    f = 9 * tf.sin(9 * x)
    # f = 8 * tf.sin(8 * x)+tf.sin(x)+2 * tf.sin(2 * x)+3 * tf.sin(3 * x)+4 * tf.sin(4 * x)
    for i in range(1, 6):
        f += i * tf.sin(i * x)
    return -dy_xx - f


geom = dde.geometry.Interval(0, np.pi)#x范围

data = dde.data.PDE(geom, PINNpde, [], 15, 0, "uniform", solution=func, num_test=100)

layer_size = [1] + [50] * 3 + [1]
# activation = "tanh"#激活函数
net = dde.maps.FNN(layer_size, activation, initializer)
def output_transform(x, y):
    return x + tf.math.tanh(x) * tf.math.tanh(np.pi - x) * y


net.apply_output_transform(output_transform)

PINNmodel = dde.Model(data, net)
PINNmodel.compile("adam", lr=0.001, metrics=["l2 relative error"])
losshistory, train_state = PINNmodel.train(epochs=ec)
dde.saveplot(losshistory, train_state, issave=True, isplot=False)


#中心差分

def cgPINNpde(x, y):
    dy_xx = dde.grad.hessian(y, x)
    dy_xxx = dde.grad.jacobian(dy_xx, x)
    # dy_xxx=  (
    #         (x+2*h)+1/9*tf.sin(9*(x+2*h))+tf.sin((x+2*h))+1/2*tf.sin(2*(x+2*h))+1/3*tf.sin(3*(x+2*h))+1/4*tf.sin(4*(x+2*h))+1/5*tf.sin(5*(x+2*h))
    #         -2*((x+h)+1/9*tf.sin(9*(x+h))+tf.sin(x+h)+1/2*tf.sin(2*(x+h))+1/3*tf.sin(3*(x+h))+1/4*tf.sin(4*(x+h))+1/5*tf.sin(5*(x+h)))
    #         +2*((x-h)+1/9*tf.sin(9*(x-h))+tf.sin(x-h)+1/2*tf.sin(2*(x-h))+1/3*tf.sin(3*(x-h))+1/4*tf.sin(4*(x-h))+1/5*tf.sin(5*(x-h)))
    #         -((x-2*h)+1/9*tf.sin(9*(x-2*h))+tf.sin((x-2*h))+1/2*tf.sin(2*(x-2*h))+1/3*tf.sin(3*(x-2*h))+1/4*tf.sin(4*(x-2*h))+1/5*tf.sin(5*(x-2*h)))
    #           )/2/h**3
    f = 9 * tf.sin(9 * x)
    # f = 8 * tf.sin(8 * x)+tf.sin(x)+2 * tf.sin(2 * x)+3 * tf.sin(3 * x)+4 * tf.sin(4 * x)
    for i in range(1, 6):
        f += i * tf.sin(i * x)
    df_x = (

        ((tf.sin(x+h)+2*tf.sin(2*(x+h))+3*tf.sin(3*(x+h))+4*tf.sin(4*(x+h))+5*tf.sin(5*(x+h))+9*tf.sin(9*(x+h)))
         -(tf.sin(x-h)+2*tf.sin(2*(x-h))+3*tf.sin(3*(x-h))+4*tf.sin(4*(x-h))+5*tf.sin(5*(x-h))+9*tf.sin(9*(x-h))))/2/h

    )
    return [-dy_xx - f, -dy_xxx - df_x]



geom = dde.geometry.Interval(0, np.pi)#x范围
data = dde.data.PDE(geom, cgPINNpde, [], 15, 0, "uniform", solution=func, num_test=100)

layer_size = [1] + [50] * 3 + [1]
# activation = "tanh"
# activation = "gelu"
initializer = "Glorot uniform"
net = dde.maps.FNN(layer_size, activation, initializer)


def output_transform(x, y):
    return x + tf.math.tanh(x) * tf.math.tanh(np.pi - x) * y


net.apply_output_transform(output_transform)

cgPINNmodel = dde.Model(data, net)
cgPINNmodel.compile(
    "adam", lr=0.001, metrics=["l2 relative error"], loss_weights=[1, 0.01]
)
losshistory, train_state = cgPINNmodel.train(epochs=ec)

dde.saveplot(losshistory, train_state, issave=True, isplot=False)


# plots
x = geom.uniform_points(1000)

plt.figure()
plt.plot(x, func(x), label="Exact", color="black")
plt.plot(x, PINNmodel.predict(x), label="PINN", color="green", linestyle="dashed")
plt.plot(
    x, cgPINNmodel.predict(x), label="cgPINN", color="red", linestyle="dashed"
)
plt.legend(frameon=False)

x = geom.uniform_points(15, boundary=False)
plt.plot(x, func(x), color="black", marker="o", linestyle="none")
plt.xlabel("x")
plt.ylabel("u")



x = geom.uniform_points(1000)
def du_x(x):
    return 1 + np.cos(x) + np.cos(2 * x) + np.cos(3 * x) + np.cos(4 * x) + np.cos(5 * x)+np.cos(9 * x)

plt.figure()
plt.plot(x, du_x(x), label="Exact", color="black")
plt.plot(
    x,
    PINNmodel.predict(x, operator=lambda x, y: dde.grad.jacobian(y, x)),
    label="PINN",
    color="green",
    linestyle="dashed",
)
plt.plot(
    x,
    gPINNmodel.predict(x, operator=lambda x, y: dde.grad.jacobian(y, x)),
    label="gPINN",
    color="blue",
    linestyle="dashed",
)
plt.plot(
    x,
    cgPINNmodel.predict(x, operator=lambda x, y: dde.grad.jacobian(y, x)),
    label="cgPINN",
    color="red",
    linestyle="dashed",
)

x = geom.uniform_points(15, boundary=False)
plt.plot(x, du_x(x), color="black", marker="o", linestyle="none")

plt.legend(frameon=False)
plt.xlabel("x")
plt.ylabel("u'")

plt.show()


PINNresiduals = PINNmodel.predict(x, operator=PINNpde)[0]
cgPINNresiduals = cgPINNmodel.predict(x, operator=cgPINNpde)[0]


print("Mean absolute PDE residual:")
print("\tPINN:", np.mean(abs(PINNresiduals)))
print("\tcgPINN:", np.mean(abs(cgPINNresiduals)))



print("L2 relative error of u:")
print("\tPINN:", dde.metrics.l2_relative_error(func(x), PINNmodel.predict(x)))
print("\tcgPINN:", dde.metrics.l2_relative_error(func(x), cgPINNmodel.predict(x)))





print("L2 relative error of du_x")
print(
    "\tPINN:",
    dde.metrics.l2_relative_error(
        du_x(x), PINNmodel.predict(x, lambda x, y: dde.grad.jacobian(y, x, j=0))
    ),
)
print(
    "\tgPINN:",
    dde.metrics.l2_relative_error(
        du_x(x), gPINNmodel.predict(x, lambda x, y: dde.grad.jacobian(y, x, j=0))
    ),
)
print(
    "\tcgPINN:",
    dde.metrics.l2_relative_error(
        du_x(x), cgPINNmodel.predict(x, lambda x, y: dde.grad.jacobian(y, x, j=0))
    ),
)

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt
import deepxde as dde
import tensorflow as tf

# PINN
def PINNpde(x, y):
    dy_xx = dde.grad.hessian(y, x)
    f = 8 * tf.sin(8 * x)
    for i in range(1, 5):
        f += i * tf.sin(i * x)
    return -dy_xx - f

# 数值解
def func(x):
    sol = x + 1 / 8 * np.sin(8 * x)
    for i in range(1, 5):
        sol += 1 / i * np.sin(i * x)
    return sol

geom = dde.geometry.Interval(0, np.pi)  # x范围
data = dde.data.PDE(geom, PINNpde, [], 15, 0, "uniform", solution=func, num_test=100)

layer_size = [1] + [20] * 5 + [1]
activation = "tanh"  # 激活函数
initializer = "Glorot uniform"
net = dde.maps.FNN(layer_size, activation, initializer)

def output_transform(x, y):
    return x+ tf.math.tanh(x) * tf.math.tanh(np.pi - x) * y
net.apply_output_transform(output_transform)

PINNmodel = dde.Model(data, net)
PINNmodel.compile("adam", lr=0.0001, metrics=["l2 relative error"])
losshistory, train_state = PINNmodel.train(epochs=20000)

dde.saveplot(losshistory, train_state, issave=True, isplot=False)

x = geom.uniform_points(10000)

plt.figure()
plt.plot(x, func(x), label="Exact", color="black")
plt.plot(x, PINNmodel.predict(x), label="PINN", color="blue", linestyle="dashed")

plt.legend(frameon=False)

x = geom.uniform_points(15, boundary=False)
plt.plot(x, func(x), color="black", marker="o", linestyle="none")
plt.xlabel("x")
plt.ylabel("u")

plt.show()
